<%- include('./partials/head.ejs' ) %>

<link rel="stylesheet" href="/css/settings.min.css?version=<%= version %>" />

<div x-data="Group">
    <%- include('./partials/group/editor.ejs' ) %>
    <%- include('./partials/group/item.ejs' ) %>
    <%- include('./partials/group/mover.ejs' ) %>
</div>

<input type="hidden" id="GroupData" value="<%= JSON.stringify(model) %>" />
<input type="hidden" id="Apps" value="<%= JSON.stringify(apps) %>" />

<script src="/js/settings.js?version=<%= version %>"></script>


<script>

    document.addEventListener('alpine:init', () => {
        let json = document.getElementById('GroupData').value;
        let apps = JSON.parse(document.getElementById('Apps').value);
        let group = JSON.parse(json);

        Alpine.plugin(focus);
        Alpine.data('Group', () => ({
            Group: group,
            Apps: apps,
            Saving: false,
            MoverOpen: false,
            MoverItem: {},
            MoverDestination: '',
            MoverTitle: '',
            EditorOpen: false,
            EditModel: { },
            EditorTitle: '',
            EditorApp:{},
            isItemSaved: false,
            NewEdit:false,
            init() {
                this.focusEditor();
            },
            isDisabled() {
                if(this.Saving || this.testing)
                    return true;
                return false;
            },
            focusEditor(){
                setTimeout(()=> { document.querySelector('.group .content').querySelector('input, select').focus();}, 250);
            },
            focusItem(){
                setTimeout(()=> { document.querySelector('.group-item-editor .content').querySelector('input, select').focus();}, 250);
            },
            focusMover(){
                setTimeout(()=> { document.querySelector('.group-item-mover-editor .content').querySelector('input, select').focus();}, 250);
            },
            typeChanged(event){
                if(!event){
                    this.EditorApp = {TestFunction: false};
                    return;
                }
                let type = typeof(event) === 'string' ? event : event.target?.value;
                if(type !== 'DashboardApp')
                    this.EditorApp = {};
                this.EditModel.AppName = '';
            },
            appChanged(event) {
                if(!event){
                    this.EditorApp = {};
                    return;
                }

                let resetUrl = !this.EditModel.Url || 
                               this.EditModel.Url === 'http://' ||
                               this.EditModel.Url == this.EditorApp?.DefaultUrl;

                if(this.EditModel.Name === this.EditorApp?.Name)
                    this.EditModel.Name = '';
                let fromInit = typeof(event) === 'string';
                let newApp = typeof(event) === 'string' ? event : event.target?.value;
                if(!newApp){
                    this.EditorApp = {};
                    return;
                }
                if(fromInit === false || !this.EditModel.Properties){
                    this.EditModel.Properties = {}; // clear these
                }
                let index = this.Apps.findIndex(x => x.Name === newApp);
                if(index >= 0){
                    if(this.Apps[index].Icon.indexOf('/') < 0)
                        this.Apps[index].Icon = `/apps/${this.Apps[index].Name}/${this.Apps[index].Icon}`;

                    this.EditorApp = JSON.parse(JSON.stringify(this.Apps[index]));
                    if((fromInit === false || !this.EditModel.Icon) && this.EditorApp)
                        this.EditModel.Icon = this.EditorApp.Icon;


                    if(this.EditModel.Icon?.toLowerCase()?.startsWith('app'))
                        this.EditModel.Icon = '/' + this.EditModel.Icon;
                }
                else
                    this.EditorApp = {};

                if(this.EditorApp?.Properties?.length){
                    // set the default property values if this app defines them
                    for(let prop of this.EditorApp.Properties)
                    {
                        if(prop.Default)
                            this.EditModel.Properties[prop.Id] = prop.Default;
                    }
                }    

                if(!this.NewEdit)
                    this.EditModel.Size = this.EditorApp.DefaultSize || 'medium';
                else
                    this.NewEdit = false; // clear it

                if(resetUrl)
                {
                    this.EditModel.Url = this.EditorApp.DefaultUrl || 'http://';
                }

                if(!this.EditModel.Name)
                    this.EditModel.Name = this.EditorApp.Name;
            },
            removeItem(uid, separator) {
                if(this.isDisabled()) return;

                let index = this.Group.Items.findIndex(x => x.Uid === uid);
                if(index >= 0){
                    let msg;
                    if(separator)
                        msg = `Are you sure you want to remove separator?`
                    else {
                        let name = this.Group.Items[index].Name;
                        msg = `Are you sure you want to remove the item '${name}'?`
                    }
                    confirmPrompt(msg).then(()=>{
                        this.Group.Items.splice(index, 1);
                    });
                }
            },
            moveItem(uid) {
                if(this.isDisabled()) return;

                let index = this.Group.Items.findIndex(x => x.Uid === uid);
                if(index >= 0){
                    this.MoverItem = this.Group.Items[index];
                    this.MoverTitle = 'Move ' + this.MoverItem.Name;
                    this.MoverDestination = '';
                    this.MoverOpen = true;
                    this.focusMover();
                }
            },
            validate(){

                if(this.EditorOpen && this.isItemSaved === false)
                    return true;

                let selector = this.EditorOpen ? 'group-item-editor' : 
                                this.MoverOpen ? 'group-item-mover-editor' :
                                'group';

                let inputs = [...document.querySelectorAll(`.${selector}.settings-box [data-rules]`)];
                let valid = true;
                inputs.map((input) => {
                    if (Iodine.is(input.value, JSON.parse(input.dataset.rules)) !== true) {
                        valid = false;
                        input.classList.add("invalid");
                    }else{
                        input.classList.remove("invalid");
                    }
                });

                if(false && this.EditorOpen){
                    if(!this.EditModel.Icon){
                        document.getElementById('file-chooser-btn').classList.add('invalid');
                        return false;
                    }else{
                        document.getElementById('file-chooser-btn').classList.remove('invalid');
                    }
                }

                return valid;
            },
            save() {
                if(this.isDisabled()) return;

                // first validate it
                if(this.validate() === false)
                    return;

                const options = {
                    method: 'POST',
                    body: JSON.stringify(this.Group),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
                this.Saving = true;
                fetch('/group/' + encodeURIComponent(this.Group.Uid), options).then(res => {
                    if(!res.ok)
                        throw res;
                    this.Saving = false;
                    window.location.href = '/groups';
                }).catch(err => {
                    console.log(err);
                    toast('Failed to save', false);
                    this.Saving = false;
                });
            },
            cancel() {
                window.location.href = '/groups';
            },
            addSeparator(){
                this.Group.Items.push({
                    Uid: newGuid(),
                    _Type: 'DashboardSeparator',
                    Name: 'Seperator',
                    Url: '-----------------------------------------------------------'
                });
            },
            addItem() {
                if(this.isDisabled()) return;

                this.isItemSaved = false;
                this.EditorApp.Properties = {};
                this.EditModel = 
                {
                    _Type: 'DashboardApp',
                    Uid: newGuid(),
                    Name: '',
                    Url: 'http://',
                    Icon: '',
                    Size: 'medium',
                    Properties:{}
                };
                this.EditorTitle = 'New Item';                    
                this.EditorOpen = true;
                this.focusItem();
            },
            editItem(uid) {
                if(this.isDisabled()) return;

                this.isItemSaved = false;
                this.EditorApp.Properties = {};
                let item = this.Group.Items.filter(x => x.Uid === uid)[0];
                if(item){
                    this.EditorTitle = 'Edit Item';
                    this.EditModel = JSON.parse(JSON.stringify(item)); // clone the object so any changes arent written directly to the model                                            
                    if(!this.EditModel.DisplayName)
                        this.EditModel.DisplayName = this.EditModel.Name;
                    if(!this.EditModel.Properties)
                        this.EditModel.Properties = {};
                    if(!this.EditModel.Size)
                        this.EditModel.Size = 'medium';
                    this.NewEdit = this.EditModel._Type === 'DashboardApp';
                    this.appChanged(this.EditModel.AppName);
                    this.EditorOpen = true;
                    this.focusItem();
                }
            },

            // mover
            moverSave() {
                if(this.isDisabled()) return;

                if(this.validate() === false)
                    return;
                const options = {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ItemUid: this.MoverItem.Uid,
                        SourceUid: group.Uid,
                        DestinationUid: this.MoverDestination
                    })
                }
                fetch('/group/move', options).then((res)=>{
                    if(!res.ok)
                        throw(res);
                    let index = this.Group.Items.indexOf(this.MoverItem);
                    if(index >= 0)
                        this.Group.Items.splice(index, 1);
                    this.MoverOpen = false;
                    toast(`Moved item '${this.MoverItem.Name}'`, true);
                    this.MoverItem = {};
                    this.MoverTitle = '';
                    this.focusEditor();
                }).catch(err => {
                    toast(`Failed to move '${this.MoverItem.Name}`, false);
                });
            },
            moverCancel() {
                if(this.isDisabled()) return;

                this.MoverOpen = false;
                this.MoverItem = {};
                this.focusEditor();
            },


            // item editor stuff
            closeEditor(){
                if(this.isDisabled()) return;

                this.EditorOpen = false;
                this.focusEditor();
            },
            getEditModel() {          
                // first validate it
                this.isItemSaved = true; // this tells the form its now able to be treated as dirty and errors shown
                
                if(this.validate() === false)
                    return;
                    
                return JSON.parse(JSON.stringify(this.EditModel));
            },
            saveEditor() {                
                if(this.isDisabled()) return;

                let item = this.getEditModel();
                if(!item)
                    return; // must be invalid

                let index = this.Group.Items.findIndex(x => x.Uid === item.Uid);
                if(index >= 0){
                    this.Group.Items[index] = item;
                }
                else{
                    this.Group.Items.push(item);
                }

                this.EditorOpen = false;
                this.focusEditor();
            },
            imageChosen(event){
                this.fileToDataUrl(event, src => 
                {
                    this.EditModel.Icon = src;
                    this.validate();
                })
            },                
            fileToDataUrl(event, callback) {
                if (! event.target.files.length) return;

                let file = event.target.files[0];
                let reader = new FileReader();

                reader.readAsDataURL(file);
                reader.onload = e => callback(e.target.result);
            },
            testing: false,
            testApp() {
                if(this.isDisabled()) return;

                let model = this.getEditModel();
                if(!model)
                    return;
                const options = {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({AppInstance: model})
                }
                testing = true;
                fetch(`/apps/${this.EditorApp.Name}/test`, options).then(result => {
                    if(!result.ok)
                        throw result;
                    this.testing = false;
                    toast('Success', true);
                }).catch(error => {
                    this.testing = false;
                    toast('Failure', false);
                });
            },

            // input stuff                 
            blur(){
                this.validate();
            },
            input(){
                this.validate();
            },

            // drag stuff
            dragSrcEl:null,
            dragStart(e){                    
                e.target.style.opacity = '0.4';
                this.dragSrcEl = e.target;
                e.dataTransfer.effectAllowed = 'move';
            },
            dragEnter(e){
                e.target.classList.add('over');
            },
            dragLeave(e){
                e.target.classList.remove('over');
            },
            dragOver(e){
                e.dataTransfer.dropEffect = 'move';
            },
            dragEnd(e){
                e.target.style.opacity = '1';
                document.querySelectorAll('.group-item-list li').forEach(function (item) {
                    item.classList.remove('over');
                });
            },
            dragDrop(e){
                if (this.dragSrcEl != e.target) {
                    let uid = this.dragSrcEl.getAttribute('id');
                    let targetUid = e.target.getAttribute('id');
                    let originalIndex = this.Group.Items.findIndex(x => x.Uid === uid);
                    let targetIndex = this.Group.Items.findIndex(x => x.Uid === targetUid);
                    if(originalIndex >= 0 && targetIndex >= 0 && originalIndex != targetIndex)
                    {
                        let item = this.Group.Items.splice(originalIndex, 1)[0];
                        if(targetIndex > originalIndex)
                            --targetIndex; // as now the original item has been removed, everythign afterwards has shifted down
                        this.Group.Items.splice(targetIndex, 0, item);
                    }
                }
            }
        }));
    });
</script>

<%- include('./partials/footer.ejs') %>