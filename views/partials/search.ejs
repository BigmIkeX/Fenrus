<div class="search" x-data="SearchSettings">
    <div class="search-inner">
        <img :src="model.SearchEngine?.Icon || model.DefaultEngine?.Icon">
        <input id="search-text" @input="onInput" @keydown.enter="search" x-model="model.SearchText" autofocus autocomplete="off" />
        <button @click="search">Search</button>
    </div>
</div>
<input type="hidden" id="searchEngines" value="<%= JSON.stringify(searchEngines) %>" />
<script>
    document.addEventListener('alpine:init', () => {            
        let json = document.getElementById('searchEngines').value;            
        let searchEngines = json ? JSON.parse(json) : [];
        let defaultEngine = searchEngines.filter(x => x.IsDefault);
        if(defaultEngine?.length)
            defaultEngine = defaultEngine[0];
        else
            defaultEngine = searchEngines[0];
        Alpine.data('SearchSettings', () => ({
            model: {
                SearchText: '',
                SearchEngine: null,
                DefaultEngine: defaultEngine
            },
            init() {
                document.getElementById('search-text').focus();
            },
            search() {
                let searchText = this.model.SearchText.trim();
                if(!searchText)
                    return;

                if(/^(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}($|\/)/.test(searchText)){
                    // ip address url, lets just go right there
                    window.location = 'http://' + searchText;
                    return;
                }
                if(/^[a-z][a-z\-]*(:[\d]+)?\//i.test(searchText)){
                    // hostname /
                    window.location = 'http://' + searchText;
                    return;
                }
                if(/^((?!-))(xn--)?[a-z0-9][a-z0-9-_]{0,61}[a-z0-9]{0,1}\.(xn--)?([a-z0-9\-]{1,61}|[a-z0-9-]{1,30}\.[a-z]{2,})$/.test(searchText)){
                    // donamename 
                    window.location = 'http://' + searchText;
                    return;
                }

                let url = (this.model.SearchEngine || this.model.DefaultEngine || { Url: 'https://duckduckgo.com/?q=%s'}).Url;
                url = url.replace('%s', encodeURIComponent(searchText));
                window.location = url;
            },
            onInput(event) {    
                if(event.inputType.startsWith('delete'))
                {
                    if(!this.model.SearchText && this.model.SearchEngine){
                        // clear the search engine
                        this.model.SearchEngine = null;
                        return;
                    } 
                }
                if(this.model.SearchEngine)
                    return; // already using a search engine
                if(/^[a-zA-Z]+ /.test(this.model.SearchText)){
                    // matches how a search engine shortcut is used
                    let shortcut = this.model.SearchText.slice(0, -1).toLowerCase();
                    let se = searchEngines.filter(x => x.Shortcut === shortcut);
                    if(!se?.length)
                        return;
                    this.model.SearchEngine = se[0];
                    this.model.SearchText = ' ';
                    return;
                }
            }
        }));
    });

</script>
        